{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/router\";\nconst _c0 = function (a1) {\n  return [\"/download\", a1];\n};\nfunction ResumeComponent_li_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"a\", 4);\n    i0.ɵɵtext(3, \"Download\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const resume_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", resume_r1.name, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction1(2, _c0, resume_r1._id));\n  }\n}\nexport class ResumeComponent {\n  constructor(http) {\n    this.http = http;\n    this.selectedFile = null;\n    this.resumes = [];\n  }\n  ngOnInit() {\n    this.getResumes();\n  }\n  onFileSelected(event) {\n    this.selectedFile = event.target.files[0];\n  }\n  uploadResume() {\n    if (!this.selectedFile) return;\n    const formData = new FormData();\n    formData.append('resume', this.selectedFile);\n    this.http.post('http://localhost:3000/upload', formData).subscribe(response => {\n      console.log('Resume uploaded successfully');\n      this.selectedFile = null;\n      this.getResumes();\n    }, error => {\n      console.error('Error uploading resume', error);\n    });\n  }\n  getResumes() {\n    this.http.get('http://localhost:3000/resumes').subscribe(data => {\n      this.resumes = data;\n    });\n  }\n}\n_class = ResumeComponent;\n_class.ɵfac = function ResumeComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-resume\"]],\n  decls: 11,\n  vars: 1,\n  consts: [[\"for\", \"resumeFile\"], [\"type\", \"file\", \"id\", \"resumeFile\", 3, \"change\"], [3, \"click\"], [4, \"ngFor\", \"ngForOf\"], [3, \"routerLink\"]],\n  template: function ResumeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"Upload a Resume\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"label\", 0);\n      i0.ɵɵtext(3, \"Choose a Resume File:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"input\", 1);\n      i0.ɵɵlistener(\"change\", function ResumeComponent_Template_input_change_4_listener($event) {\n        return ctx.onFileSelected($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function ResumeComponent_Template_button_click_5_listener() {\n        return ctx.uploadResume();\n      });\n      i0.ɵɵtext(6, \"Upload\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"h2\");\n      i0.ɵɵtext(8, \"Resume List\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"ul\");\n      i0.ɵɵtemplate(10, ResumeComponent_li_10_Template, 4, 4, \"li\", 3);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"ngForOf\", ctx.resumes);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.RouterLink],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","resume_r1","name","ɵɵproperty","ɵɵpureFunction1","_c0","_id","ResumeComponent","constructor","http","selectedFile","resumes","ngOnInit","getResumes","onFileSelected","event","target","files","uploadResume","formData","FormData","append","post","subscribe","response","console","log","error","get","data","ɵɵdirectiveInject","i1","HttpClient","selectors","decls","vars","consts","template","ResumeComponent_Template","rf","ctx","ɵɵlistener","ResumeComponent_Template_input_change_4_listener","$event","ResumeComponent_Template_button_click_5_listener","ɵɵtemplate","ResumeComponent_li_10_Template"],"sources":["D:\\full stack mern,mean,java\\upload files\\resume-app\\src\\app\\resume\\resume.component.ts","D:\\full stack mern,mean,java\\upload files\\resume-app\\src\\app\\resume\\resume.component.html"],"sourcesContent":["// src/app/resume/resume.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { AppComponent } from '../app.component';\n\n@Component({\n  selector: 'app-resume',\n  templateUrl: './resume.component.html',\n  styleUrls: ['./resume.component.css'],\n})\nexport class ResumeComponent implements OnInit {\n  selectedFile: File | null = null;\n  resumes: any[] = [];\n\n  constructor(private http: HttpClient) {}\n\n  ngOnInit(): void {\n    this.getResumes();\n  }\n\n  onFileSelected(event: any) {\n    this.selectedFile = event.target.files[0];\n  }\n\n  uploadResume() {\n    if (!this.selectedFile) return;\n\n    const formData = new FormData();\n    formData.append('resume', this.selectedFile);\n\n    this.http.post('http://localhost:3000/upload', formData).subscribe(\n      (response) => {\n        console.log('Resume uploaded successfully');\n        this.selectedFile = null;\n        this.getResumes();\n      },\n      (error) => {\n        console.error('Error uploading resume', error);\n      }\n    );\n  }\n\n  getResumes() {\n    this.http.get('http://localhost:3000/resumes').subscribe((data: any) => {\n      this.resumes = data;\n    });\n  }\n}\n","<!-- src/app/resume/resume.component.html -->\n<h2>Upload a Resume</h2>\n<label for=\"resumeFile\">Choose a Resume File:</label>\n<input type=\"file\" (change)=\"onFileSelected($event)\" id=\"resumeFile\" />\n<button (click)=\"uploadResume()\">Upload</button>\n\n<h2>Resume List</h2>\n<ul>\n    <li *ngFor=\"let resume of resumes\">\n        {{ resume.name }}\n        <a [routerLink]=\"['/download', resume._id]\">Download</a>\n    </li>\n</ul>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}